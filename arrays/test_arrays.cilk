// Code for the Nabbit task graph library
//
// Copyright (c) 2010 Jim Sukha
//
//
/*
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <iostream>
#include <cstdlib>
#include <cilk.h>


#include "array2d_row.h"
#include "array2d_morton.h"


template <class MatrixType>
void testMatrix(MatrixType M,
		int width, int height) {
  printf("Initial layout of M: \n");
  M->print_layout();

  M->fill_with_constant_element(0);
  printf("Printing zero in M: \n");
  M->print();

  M->fill_with_constant_element(43);
  printf("Printing 43 in M?: \n");
  M->print();

  printf("Testing setters?: \n");
  for (int i = 0; i < height; i++) {
    for (int j = 0; j < width; j++) {
      M->set(i, j, i+j);
    }
  }
  printf("Done\n");
  printf("Testing getters?: \n");
  M->print();     
  for (int i = 0; i < height; i++) {
    for (int j = 0; j < width; j++) {
      //	 printf("At (%d, %d) we got %d\n",
      //		i, j,
      //		M->get(i, j));
      assert(M->get(i, j) == (i+j));
	 
    }
  }

  printf("Testing iterators?: \n");
  int i = 0;
  for (ArrayLargeDim row_idx = M->row_iterator();
       M->has_next_row(&row_idx);
       M->increment_row(&row_idx)) {
    int j = 0;

    for (ArrayLargeDim col_idx = M->col_iterator();
	 M->has_next_col(&col_idx);
	 M->increment_col(&col_idx)) {

      //      printf("col_idx here has val %llu\n",
      //	     col_idx);
      //      	 printf("i = %d, j = %d, M->row = %d, M->col = %d\n",
      //      		i, j,
      //      		M->row_idx(&row_idx),
      //      		M->col_idx(&col_idx));

      assert(M->row_idx(&row_idx) == i);        
      assert(M->col_idx(&col_idx) == j);
      assert(M->idx_get(&row_idx,
			&col_idx) == (i+j));
      j++;			   
    }

    assert(j == width);
    i++;
  }
  assert(i == height);
  printf("Done testing iterators\n");


  printf("Final matrix layout: \n");
  M->print_layout();  
}


int cilk_main(int argc, char *argv[])
{

  int width = 100;
  int height = 150;
  int padding = 4;

  if (argc >= 2) {
    width = atoi(argv[1]);

    if (argc >= 3) {
      height = atoi(argv[2]);
    }
  }

  printf("Width = %d, Height = %d\n", width, height);

  {
    NabbitArray2DRowMajor<int>* M = new NabbitArray2DRowMajor<int>(width, height, padding);
    assert(M);
    testMatrix<NabbitArray2DRowMajor<int>*>(M, width, height);
    delete M;
  }

  {
    NabbitArray2DMorton<int, 0, 0>* M2 = new NabbitArray2DMorton<int, 0, 0>(width, width);
    assert(M2);
    testMatrix<NabbitArray2DMorton<int, 0, 0>*>(M2, width, width);
    delete M2;
  }

  {
    // Morton array with some padding.
    NabbitArray2DMorton<int, 2, 3>* M3 = new NabbitArray2DMorton<int, 2, 3>(width, width);
    assert(M3);
    testMatrix<NabbitArray2DMorton<int, 2, 3>*>(M3, width, width);
    delete M3;
  }

  printf("Completed layout test\n");
    
  return 0;
}

