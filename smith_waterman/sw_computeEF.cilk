// Code for the Nabbit task graph library
//
// Dynamic Programming benchmark.
//
// Copyright (c) 2010 Jim Sukha
//
//
/*
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "sw_computeEF.h"



/**************************************************************/
// The computation of Eij and Fij which uses getters


template <class MatrixType>
int computeEij_getters(int* gamma,
		       MatrixType* M,
		       int i, int j) {
  int gamma_val = gamma[i];
  int max_val = M->get(0, j) + gamma_val;
  for (int k_i = 1; k_i <= i-1; k_i++) {
    int test_val = M->get(k_i, j) + gamma[i-k_i];
    if (test_val > max_val) {
      max_val = test_val;
    }
  }
  return max_val;  
}

template <class MatrixType>
int computeFij_getters(int* gamma,
		       MatrixType* M,
		       int i, int j) {
  int gamma_val = gamma[j];
  int max_val = M->get(i, 0) + gamma_val;

  for (int k_j = 1; k_j <= j-1; k_j++) {
    int test_val = M->get(i, k_j) + gamma[j - k_j];
    if (test_val > max_val) {
      max_val = test_val;
    }
  }  
  return max_val;    
}



/**************************************************************/
// The computation of Eij and Fij which uses iterators.

template <class MatrixType>
int computeEij_iterator(int* gamma,
			MatrixType* M,
			int i, int j) {

    // The version which uses a row and column iterator
    int gamma_val = gamma[i];   
    ArrayLargeDim k_i = M->row_iterator(0);
    ArrayLargeDim col_idx = M->col_iterator(j);

    int max_val = M->idx_get(&k_i,
			     &col_idx) + gamma_val;
    
    for (int k_i_count = 1; k_i_count <= i-1; ++k_i_count) {
      M->next_row(&k_i);

      int test_val = M->idx_get(&k_i,
				&col_idx) + gamma[i-k_i_count];
      max_val = MAX(max_val, test_val);
    }
    return max_val;    
}

template <class MatrixType>
int computeFij_iterator(int* gamma,
			MatrixType* M,
			int i, int j) {
  // The version which uses a row and column iterator
  int gamma_val = gamma[j];   

  ArrayLargeDim row_idx = M->row_iterator(i);
  ArrayLargeDim k_j = M->col_iterator(0);

  int max_val = M->idx_get(&row_idx,
			   &k_j) + gamma_val;
    
  for (int k_j_count = 1; k_j_count <= j-1; ++k_j_count) {
    M->next_col(&k_j);
    int test_val = M->idx_get(&row_idx, &k_j) + gamma[j-k_j_count];
    max_val = MAX(max_val, test_val);
  }
  return max_val;    
}




/*************************************************************/
// The code which uses a Cilk++ reducer.
template <class MatrixType>
int computeEij_reducer(int* gamma,
		       MatrixType* M,
		       int i, int j) {

  cilk::hyperobject<cilk::reducer_max<int> > max_val(INT_MIN);

  cilk_for(int k_i = 0; k_i <= i - 1; ++k_i) {
    int test_val = M->get(k_i, j) + gamma[i-k_i];
    max_val() = cilk::max_of(max_val(), test_val);
  }
  return max_val().get_value();
}



